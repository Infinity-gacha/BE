파일 위치: JSON 파일들을 React Native 프로젝트 내 특정 폴더에 저장합니다.

동적 로딩: 사용자의 선택(DISC, 성별, 연령대)에 따라 해당되는 JSON 파일을 동적으로 불러옵니다.

상태 관리: 불러온 페르소나 데이터를 React 컴포넌트의 상태로 관리하여 UI에 반영하거나 API 호출 시 사용합니다.

단계별 구현 방법:

1. JSON 파일 준비 및 프로젝트 내 저장

폴더 생성: 프로젝트의 src 폴더 (또는 원하는 위치) 내에 페르소나 JSON 파일을 저장할 폴더를 만듭니다. (예: src/personas/)

파일 명명 규칙: 일관된 파일 명명 규칙을 정합니다. 이는 동적으로 파일을 선택하는 데 매우 중요합니다.

예시: [age]_[disc]_[gender].json

10_D_M.json

여기서 gender는 male, female (또는 m, f 등 약자)로, age는 10, 20, 30, 40으로 통일합니다.

파일 저장: 이전 단계에서 생성한 32가지 페르소나 JSON 파일들을 위 명명 규칙에 따라 src/personas/ 폴더에 저장합니다.

2. React Native 컴포넌트에서 JSON 파일 로드 및 사용

사용자가 DISC, 성별, 연령대를 선택하면, 해당 선택에 맞는 페르소나 JSON을 불러와야 합니다.

// 예시: PersonaChatScreen.js

import React, { useState, useEffect } from 'react';
import { View, Text, Button, Picker } from 'react-native'; // Picker는 예시이며, UI에 맞게 선택

// 페르소나 데이터 타입 정의 (TypeScript 사용 시)
interface PersonaSettings {
  disc_type: string;
  disc_description: string;
  gender: string;
  gender_nuance: string;
  age_group: string;
  age_group_characteristics: string;
  speech_style_and_tone: {
    base: string;
    examples: string[];
  };
  core_interests: string[];
}

interface PersonaPrompt {
  system_prompt_version: string;
  description: string;
  target_user_info: {
    gender_placeholder: string;
    age_group_placeholder: string;
  };
  ai_role_definition: {
    base_role: string;
    ultimate_goal: string;
    anonymity_guideline: string;
  };
  persona_settings: PersonaSettings;
  conversation_guidelines: string[];
  prohibitions: string[];
  initial_interaction: { // 또는 first_response_guideline
    instruction: string;
    // example_starter_phrases?: string[]; // 이전 논의에 따라 이 부분은 없을 수도 있음
  };
}

// 페르소나 파일들을 미리 import 하거나, require를 통해 접근할 수 있도록 맵을 만듭니다.
// Metro Bundler가 동적 require 경로를 잘 처리하지 못할 수 있으므로, 이 방식이 더 안정적입니다.
const personaFiles = {
  d_male_10: require('../personas/d_male_10.json'),
  d_female_10: require('../personas/d_female_10.json'),
  // ... (나머지 30개 페르소나 파일도 동일하게 추가) ...
  c_male_40: require('../personas/c_male_40.json'),
  c_female_40: require('../personas/c_female_40.json'),
};

const PersonaChatScreen = () => {
  // 사용자 선택 상태
  const [selectedDisc, setSelectedDisc] = useState('D'); // 기본값 예시
  const [selectedGender, setSelectedGender] = useState('male'); // 기본값 예시
  const [selectedAge, setSelectedAge] = useState('10'); // 기본값 예시

  // 로드된 페르소나 프롬프트 상태
  const [currentPersonaPrompt, setCurrentPersonaPrompt] = useState<PersonaPrompt | null>(null);
  const [loadingError, setLoadingError] = useState<string | null>(null);

  // 페르소나 로드 함수
  const loadPersonaPrompt = () => {
    setLoadingError(null); // 에러 메시지 초기화
    try {
      // 파일 이름 조합 (소문자로 통일하는 것이 좋음)
      const disc = selectedDisc.toLowerCase();
      const gender = selectedGender.toLowerCase(); // 'male', 'female'
      const age = selectedAge; // '10', '20', '30', '40'

      const fileNameKey = `${disc}_${gender}_${age}` as keyof typeof personaFiles;

      if (personaFiles[fileNameKey]) {
        const promptData: PersonaPrompt = personaFiles[fileNameKey];
        setCurrentPersonaPrompt(promptData);
      } else {
        console.error(`페르소나 파일을 찾을 수 없습니다: ${fileNameKey}.json`);
        setLoadingError(`선택하신 페르소나(${disc.toUpperCase()}/${gender}/${age})에 대한 설정 파일을 찾을 수 없습니다.`);
        setCurrentPersonaPrompt(null);
      }
    } catch (error) {
      console.error("페르소나 파일 로드 중 오류 발생:", error);
      setLoadingError("페르소나 설정을 불러오는 중 오류가 발생했습니다.");
      setCurrentPersonaPrompt(null);
    }
  };

  // 사용자의 선택이 변경될 때마다 페르소나를 다시 로드
  useEffect(() => {
    loadPersonaPrompt();
  }, [selectedDisc, selectedGender, selectedAge]);

  // 시스템 프롬프트 생성 (실제 LLM API 호출 시 사용)
  const getSystemPromptForLLM = (userData: { gender: string; age_group: string }) => {
    if (!currentPersonaPrompt) return "";

    let systemPrompt = currentPersonaPrompt.ai_role_definition.base_role;
    systemPrompt = systemPrompt.replace('{target_user_info.gender_placeholder}', userData.gender);
    systemPrompt = systemPrompt.replace('{target_user_info.age_group_placeholder}', userData.age_group);

    // 여기에 currentPersonaPrompt의 다른 요소들을 조합하여 전체 시스템 프롬프트를 완성합니다.
    // 예: currentPersonaPrompt.persona_settings, currentPersonaPrompt.conversation_guidelines 등
    // 전체 JSON 객체를 문자열화 하거나, 필요한 부분만 추출하여 LLM이 이해할 수 있는 형태로 만듭니다.

    // 예시로 JSON 전체를 문자열화 (실제로는 LLM API가 요구하는 형식에 맞춰야 함)
    // 또는 필요한 부분만 추출하여 템플릿 리터럴로 조합
    const personaDetails = `
[페르소나 상세 설정]
*   성격 유형 (DISC): ${currentPersonaPrompt.persona_settings.disc_type} - ${currentPersonaPrompt.persona_settings.disc_description}
*   성별: ${currentPersonaPrompt.persona_settings.gender} - ${currentPersonaPrompt.persona_settings.gender_nuance}
*   연령대: ${currentPersonaPrompt.persona_settings.age_group} - ${currentPersonaPrompt.persona_settings.age_group_characteristics}
*   말투 및 어조: ${currentPersonaPrompt.persona_settings.speech_style_and_tone.base} (예: ${currentPersonaPrompt.persona_settings.speech_style_and_tone.examples.join(', ')})
*   주요 관심사: ${currentPersonaPrompt.persona_settings.core_interests.join(', ')}

[대화 지침]
${currentPersonaPrompt.conversation_guidelines.join('\n')}

[금지 사항]
${currentPersonaPrompt.prohibitions.join('\n')}

${currentPersonaPrompt.initial_interaction ? `[첫 응답 가이드라인]\n${currentPersonaPrompt.initial_interaction.instruction}` : ''}
    `; // initial_interaction이 없는 경우를 대비

    return `${systemPrompt}\n${currentPersonaPrompt.ai_role_definition.ultimate_goal}\n${currentPersonaPrompt.ai_role_definition.anonymity_guideline}\n${personaDetails}`;
  };


  // --- UI 렌더링 부분 ---
  // Picker나 커스텀 버튼 등으로 사용자 선택 UI 구현
  // currentPersonaPrompt가 있으면 해당 정보 표시 또는 채팅 시작 버튼 활성화
  // loadingError가 있으면 에러 메시지 표시

  return (
    <View style={{ padding: 20 }}>
      <Text>DISC 선택:</Text>
      <Picker selectedValue={selectedDisc} onValueChange={(itemValue) => setSelectedDisc(itemValue as string)}>
        <Picker.Item label="D형 (주도형)" value="D" />
        <Picker.Item label="I형 (사교형)" value="I" />
        <Picker.Item label="S형 (안정형)" value="S" />
        <Picker.Item label="C형 (신중형)" value="C" />
      </Picker>

      <Text>성별 선택:</Text>
      <Picker selectedValue={selectedGender} onValueChange={(itemValue) => setSelectedGender(itemValue as string)}>
        <Picker.Item label="남성" value="male" />
        <Picker.Item label="여성" value="female" />
      </Picker>

      <Text>연령대 선택:</Text>
      <Picker selectedValue={selectedAge} onValueChange={(itemValue) => setSelectedAge(itemValue as string)}>
        <Picker.Item label="10대" value="10" />
        <Picker.Item label="20대" value="20" />
        <Picker.Item label="30대" value="30" />
        <Picker.Item label="40대" value="40" />
      </Picker>

      {loadingError && <Text style={{ color: 'red', marginTop: 10 }}>{loadingError}</Text>}

      {currentPersonaPrompt && (
        <View style={{ marginTop: 20, padding: 10, borderWidth: 1, borderColor: 'gray' }}>
          <Text style={{ fontWeight: 'bold' }}>선택된 페르소나 정보:</Text>
          <Text>유형: {currentPersonaPrompt.persona_settings.disc_type}</Text>
          <Text>성별: {currentPersonaPrompt.persona_settings.gender}</Text>
          <Text>연령: {currentPersonaPrompt.persona_settings.age_group}</Text>
          <Text>설명: {currentPersonaPrompt.persona_settings.disc_description.substring(0, 100)}...</Text>
          {/* <Text>시스템 프롬프트 (일부): {getSystemPromptForLLM({gender: "여성", age_group: "20대"}).substring(0, 200)}...</Text> */}
          <Button title="이 페르소나와 채팅 시작" onPress={() => {
            // 실제 사용자의 성별과 연령대 정보를 가져와서 전달해야 합니다.
            const userProfile = { gender: '여성', age_group: '20대' }; // 예시 사용자 정보
            const systemPromptForApi = getSystemPromptForLLM(userProfile);
            console.log("LLM API에 전달할 시스템 프롬프트:", systemPromptForApi);
            // TODO: 채팅 화면으로 이동하면서 systemPromptForApi 또는 currentPersonaPrompt 전달
          }} />
        </View>
      )}
    </View>
  );
};

export default PersonaChatScreen;


코드 설명:

personaFiles 객체:

모든 페르소나 JSON 파일을 require를 사용하여 미리 로드하고 객체에 매핑합니다.

key는 d_male_10과 같은 형태로, 값은 해당 JSON 파일의 내용입니다.

이 방식은 Metro Bundler가 정적으로 파일을 분석하고 번들에 포함시킬 수 있게 하여 동적 require의 잠재적인 문제를 피합니다.

상태 변수:

selectedDisc, selectedGender, selectedAge: 사용자가 UI를 통해 선택한 값을 저장합니다.

currentPersonaPrompt: 로드된 현재 페르소나의 JSON 데이터를 저장합니다. 타입은 PersonaPrompt (또는 직접 정의한 인터페이스)로 지정하여 자동 완성과 타입 체크의 이점을 얻을 수 있습니다.

loadingError: 파일 로드 중 에러 발생 시 메시지를 저장합니다.

loadPersonaPrompt 함수:

selectedDisc, selectedGender, selectedAge 상태 값을 조합하여 personaFiles 객체에서 해당 페르소나 데이터를 찾습니다.

찾은 데이터를 currentPersonaPrompt 상태에 설정합니다.

파일을 찾지 못하거나 오류 발생 시 loadingError 상태를 설정합니다.

useEffect 훅:

selectedDisc, selectedGender, selectedAge 중 하나라도 변경되면 loadPersonaPrompt 함수를 호출하여 새로운 페르소나 데이터를 로드합니다.

getSystemPromptForLLM 함수 (중요):

로드된 currentPersonaPrompt 객체를 사용하여 실제 LLM API에 전달할 시스템 프롬프트 문자열을 생성합니다.

JSON 내의 플레이스홀더({target_user_info.gender_placeholder} 등)를 실제 사용자 정보로 치환합니다.

LLM API가 JSON 전체를 시스템 프롬프트로 받는다면 JSON.stringify(currentPersonaPrompt)를 사용할 수도 있고, 특정 필드만 조합하여 문자열로 만들어야 할 수도 있습니다. 이는 사용하는 LLM API의 명세에 따라 달라집니다. 위 예시에서는 JSON의 각 부분을 조합하여 사람이 읽기 좋은 형태의 긴 문자열 프롬프트를 만드는 방식을 보여주었습니다.

UI 렌더링:

Picker 컴포넌트 (또는 다른 UI 요소)를 사용하여 사용자가 DISC, 성별, 연령대를 선택할 수 있도록 합니다.

선택된 페르소나 정보나 에러 메시지를 화면에 표시합니다.

"채팅 시작" 버튼을 누르면 getSystemPromptForLLM을 호출하여 최종 시스템 프롬프트를 얻고, 이를 다음 화면(채팅 화면)으로 전달하거나 API 호출에 사용합니다.

3. 추가 고려 사항:

에러 처리: 파일이 없거나 잘못된 형식일 경우를 대비한 강력한 에러 처리가 필요합니다.

타이핑 (TypeScript): TypeScript를 사용한다면 JSON 구조에 대한 인터페이스를 정의하여 개발 중 타입 안정성을 높일 수 있습니다. (위 예시에 PersonaPrompt 인터페이스 포함)

파일 개수가 매우 많을 경우: 만약 페르소나 파일이 수백, 수천 개로 늘어난다면 앱 번들 크기가 커질 수 있습니다. 이 경우 필요한 파일만 서버에서 다운로드하거나, 앱 업데이트 시 함께 배포하는 방식을 고려해야 합니다. 하지만 32개 정도의 작은 JSON 파일은 앱에 포함하는 것이 일반적입니다.

헬퍼 함수: 페르소나 파일 이름 생성 로직이나 시스템 프롬프트 생성 로직이 복잡해지면 별도의 유틸리티 함수로 분리하는 것이 좋습니다.

상태 관리 라이브러리: 앱의 규모가 커지면 Redux, Zustand, Recoil 등의 상태 관리 라이브러리를 사용하여 selectedDisc, currentPersonaPrompt 등을 전역적으로 관리하는 것을 고려할 수 있습니다.

이 방법을 사용하면 사용자의 선택에 따라 적절한 페르소나 프롬프트를 동적으로 로드하여 AI 채팅 기능을 구현할 수 있습니다. 실제 LLM API 연동 부분은 해당 API의 문서를 참고하여 getSystemPromptForLLM 함수의 출력을 적절히 사용하시면 됩니다.